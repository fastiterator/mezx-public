# DESCRIPTION
#     Parse a line of text encoded in Java CSV format
#
# USAGE
#
#     Setup
#     - Ensure "lib/fsm" is contained in "LIST_L modL" prior to call to "INTERNAL_FRAMEWORK_A_loadDependencies"
#     - Read this FSM def into a LIST of STR, one line in each element
#     - Call LIB_FSM_F_setup; the sole arg must be the name of the LIST var
#     - Retrieve the FSM id from ${LIB_FSM_V_replyS} as ${fsmidS}
#     - Ensure a STR var ${lineS} exists
#
#     Usage
#     - Put a line of Java CSV formatted text in ${lineS}
#     - Call LIB_FSM_F_run; the args must be:
#         1. FSM id (e.g. ${fsmidS})
#         2. FSM entry state name (i.e. "init")
#     - Harvest the results from ${LIB_FSM_V_replyL}
#
# NOTES
#     Rules for Java-formatted CSV
#     - Fields are separated by commas
#     - Each field may be encapsulated  in double-quote chars
#     - Fields containing commas, double-quote chars or non-printable chars must be quoted
#     - Double-quote chars are quoted, within enclosing double-quote chars, by escaping the double-quote char with a backslash
#     - Leading and trailing whitespace are ignored



state init {
    case  sole {
        exec  errB=${B_F}  errS=  replyL=();  INT_L indexI=1  lineI=${#lineS};  LIST_L fieldL=();  STR_L charS  fieldS=  tailS= char_SPC=" "  char_COMMA=${INTERNAL_FRAMEWORK_CI_nametocharM[comma]}  char_DQ=${INTERNAL_FRAMEWORK_CI_nametocharM[qd]}  char_TAB;  print -v char_TAB -f '\t'
        go    start
    }
}

state start {
    case eol {
        if    ${indexI} -gt ${lineI}
    	go    wrap
    }
    case initchar {
        exec  charS=${lineS[indexI]}
    }
    case white {
        if    ${charS} = ${char_SPC} || ${charS} = ${char_TAB}
        go    headwhite
    }
    case quote {
        if    ${charS} = ${char_DQ}
        exec  indexI+=1
        go    quoted
    }
    case other {
        go    unquoted
    }
}

state headwhite {
    case eol {
        if    ${indexI} -gt ${lineI}
        go    wrap
    }
    case init {
        exec  charS=${lineS[${indexI}]}
    }
    case white {
        if    ${charS} = ${char_SPC} || ${charS} = ${char_TAB}
        exec  indexI+=1
        go    headwhite
    }
    case else {
        go    start
    }
}

state quoted {
    case eol {
        if    ${indexI} -gt ${lineI}
        fail  1  "EOL found inside quoted string"
    }
    case init {
        exec  charS=${lineS[${indexI}]}
    }
    case quote {
        if    ${charS} = ${char_DQ}
        exec  indexI+=1
        go    q2
    }
    case other {
        exec  fieldS+=${charS};  indexI+=1
        go    quoted
    }
}

state q2 {
    case eol {
        if    ${indexI} -gt ${lineI}
        go    wrap
    }
    case init {
        exec  charS=${lineS[${indexI}]}
    }
    case quote {
        if    ${charS} = ${char_DQ}
        exec  fieldS+=${char_DQ};  indexI+=1
        go    quoted
    }
    case other {
        exec  indexI+=1
        go    unquoted
    }
}

state unquoted {
    case eol {
        if    ${indexI} -gt ${lineI}
        go    wrap
    }
    case init {
        exec  charS=${lineS[${indexI}]}
    }
    case comma {
        if    ${charS} = ${char_COMMA}
        exec  fieldL+=( "${fieldS}" );  fieldS=;  indexI+=1
        go    start
    }
    case white {
        if    ${charS} = ${char_SPC} || ${charS} = ${char_TAB}
        exec  tailS=
        go    tailwhite
    }
    case other {
        exec  fieldS+=${tailS}${charS};  tailS=;  indexI+=1
        go    unquoted
    }
}

state tailwhite {
    case eol {
        if    ${indexI} -gt ${lineI}
        go    wrap
    }
    case init {
        exec  charS=${lineS[${indexI}]}
    }
    case comma {
        if    ${charS} = ${char_COMMA}
	exec  tailS=
        go    unquoted
    }
    case white {
        if    ${charS} = ${char_SPC} || ${charS} = ${char_TAB}
        exec  tailS+=${charS};  indexI+=1
        go    tailwhite
    }
    case other {
        exec  fieldS+=${tailS};  tailS=
        go    unquoted
    }
}

state wrap {
    case append {
	exec  fieldL+=( "${fieldS}" )
    }
    case only {
        exec  replyL=( "${(@)fieldL[@]}" )
        stop
    }
}
